using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using OhadSoft.AzureLetsEncrypt.Renewal.Management;

namespace OhadSoft.AzureLetsEncrypt.Renewal.WebJob.Tests.WebJob
{
    // Mostly generated by Resharper (alt+insert in the RenewalParameters class) - but non-primitives require manual implementation!
    public sealed class RenewalParametersComparer : IComparer<RenewalParameters>
    {
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity", Justification = "Comparer")]
        public int Compare(RenewalParameters x, RenewalParameters y)
        {
            if (ReferenceEquals(x, y)) return 0;
            if (ReferenceEquals(null, y)) return 1;
            if (ReferenceEquals(null, x)) return -1;
            var azureEnvironmentParamsComparer = new AzureEnvironmentParamsComparer();
            var webAppEnvironmentParamsComparison = azureEnvironmentParamsComparer.Compare(x.WebAppEnvironmentParams, y.WebAppEnvironmentParams);
            if (webAppEnvironmentParamsComparison != 0) return webAppEnvironmentParamsComparison;
            var azureDnsEnvironmentParamsComparison = azureEnvironmentParamsComparer.Compare(x.AzureDnsEnvironmentParams, y.AzureDnsEnvironmentParams);
            if (azureDnsEnvironmentParamsComparison != 0) return azureDnsEnvironmentParamsComparison;
            var webAppComparison = string.Compare(x.WebApp, y.WebApp, StringComparison.Ordinal);
            if (webAppComparison != 0) return webAppComparison;
            var toEmailComparison = string.Compare(x.ToEmail, y.ToEmail, StringComparison.Ordinal);
            if (toEmailComparison != 0) return toEmailComparison;
            var fromEmailComparison = string.Compare(x.FromEmail, y.FromEmail, StringComparison.Ordinal);
            if (fromEmailComparison != 0) return fromEmailComparison;
            var servicePlanResourceGroupComparison = string.Compare(x.ServicePlanResourceGroup, y.ServicePlanResourceGroup, StringComparison.Ordinal);
            if (servicePlanResourceGroupComparison != 0) return servicePlanResourceGroupComparison;
            var siteSlotNameComparison = string.Compare(x.SiteSlotName, y.SiteSlotName, StringComparison.Ordinal);
            if (siteSlotNameComparison != 0) return siteSlotNameComparison;
            var groupNameComparison = string.Compare(x.GroupName, y.GroupName, StringComparison.Ordinal);
            if (groupNameComparison != 0) return groupNameComparison;
            var azureDnsZoneNameComparison = string.Compare(x.AzureDnsZoneName, y.AzureDnsZoneName, StringComparison.Ordinal);
            if (azureDnsZoneNameComparison != 0) return azureDnsZoneNameComparison;
            var azureDnsRelativeRecordSetNameComparison = string.Compare(x.AzureDnsRelativeRecordSetName, y.AzureDnsRelativeRecordSetName, StringComparison.Ordinal);
            if (azureDnsRelativeRecordSetNameComparison != 0) return azureDnsRelativeRecordSetNameComparison;
            var useIpBasedSslComparison = x.UseIpBasedSsl.CompareTo(y.UseIpBasedSsl);
            if (useIpBasedSslComparison != 0) return useIpBasedSslComparison;
            var rsaKeyLengthComparison = x.RsaKeyLength.CompareTo(y.RsaKeyLength);
            if (rsaKeyLengthComparison != 0) return rsaKeyLengthComparison;
            var acmeBaseUriComparison = string.Compare(x.AcmeBaseUri?.ToString(), y.AcmeBaseUri?.ToString(), StringComparison.Ordinal);
            if (acmeBaseUriComparison != 0) return acmeBaseUriComparison;
            var webRootPathComparison = string.Compare(x.WebRootPath, y.WebRootPath, StringComparison.Ordinal);
            if (webRootPathComparison != 0) return webRootPathComparison;
            var authenticationUriComparison = string.Compare(x.AuthenticationUri?.ToString(), y.AuthenticationUri?.ToString(), StringComparison.Ordinal);
            if (authenticationUriComparison != 0) return authenticationUriComparison;
            var azureTokenAudienceComparison = string.Compare(x.AzureTokenAudience?.ToString(), y.AzureTokenAudience?.ToString(), StringComparison.Ordinal);
            if (azureTokenAudienceComparison != 0) return azureTokenAudienceComparison;
            var azureManagementEndpointComparison = string.Compare(x.AzureManagementEndpoint?.ToString(), y.AzureManagementEndpoint?.ToString(), StringComparison.Ordinal);
            if (azureManagementEndpointComparison != 0) return azureManagementEndpointComparison;
            var renewXNumberOfDaysBeforeExpirationComparison = x.RenewXNumberOfDaysBeforeExpiration.CompareTo(y.RenewXNumberOfDaysBeforeExpiration);
            if (renewXNumberOfDaysBeforeExpirationComparison != 0) return renewXNumberOfDaysBeforeExpirationComparison;
            return string.Compare(x.AzureDefaultWebsiteDomainName, y.AzureDefaultWebsiteDomainName, StringComparison.Ordinal);
        }
    }
}